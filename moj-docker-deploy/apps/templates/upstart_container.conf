description "{{app}} container"
author "tools@digital.justice.gov.uk"
start on filesystem and started docker
stop on runlevel [!2345]
respawn
script
        {% set container_name = '%s_%s' % (app, container_type) %}
        {% set container_full_name = '%s/%s_%s' % (docker_registry, app, container_type) %}
        PILLAR_TAG={{tag}}
	if [ -z $TAG ]; then 
            TAG=$PILLAR_TAG
        fi
	if [ -z $STATE]; then
	    STATE=none
	fi
	NAME={{container_name}}
        {%  if 'volumes' in pillar['docker_envs'][app] %}
        VOL_OPTS="{% for descr, vol_set in pillar['docker_envs'][app]['volumes'][container_type].items() %} -v {{vol_set['host']}}:{{vol_set['container']}} {% endfor %}"
        {% endif %}

        {% if 'ports' in pillar['docker_envs'][app] %}
        PORT_OPTS="{% for descr, port_set in pillar['docker_envs'][app]['ports'][container_type].items() %} -p {{port_set['host']}}:{{port_set['container']}} {% endfor %}"
        {% endif %}

        if [ -f /etc/docker_env.d/{{app}} ]; then
                ENV_OPTS="--env-file /etc/docker_env.d/{{app}}"
        fi
        
	START_CMD="docker run --name="${NAME}" -e DOCKER_STATE=$STATE $ENV_OPTS $VOL_OPTS $PORT_OPTS {{docker_registry}}/${NAME}:${TAG} {{pillar['docker_envs'][app].get('startup_args', '')}}"
    # If the container exists, destroy it.
    /usr/bin/docker ps -a |grep -q ${NAME} && docker rm -f ${NAME}
    $START_CMD
end script
