description "{{branch_name}} container"
author "tools@digital.justice.gov.uk"
start on filesystem and started docker
stop on runlevel [!2345]
respawn
respawn limit 5 5
env HOME=/root
script
        PILLAR_TAG='{{ tag | replace("'", "'\\''") }}'
        if [ -z $TAG ]; then
            TAG=$PILLAR_TAG
        fi

        {%  if 'volumes' in cdata %}
        VOL_OPTS="{% for descr, vol_set in cdata['volumes'].items() %} -v {{vol_set['host']}}:{{vol_set['container']}} {% endfor %}"
        {% endif %}

        {% if 'ports' in cdata %}
        PORT_OPTS="{% for descr, port_set in cdata['ports'].items() %} -p {{port_set['host']}}:{{port_set['container']}} {% endfor %}"
        {% endif %}

        if [ -f /etc/docker_env.d/{{cname}} ]; then
                ENV_OPTS="--env-file /etc/docker_env.d/{{cname}}"
        fi

    docker run --name="{{ branch_name }}" {{cdata.get('docker_args', '')}} $ENV_OPTS -e DB_NAME='{{branch_name}}' -e DOCKER_STATE=create -e DATABASE_URL="{{DATABASE_URL}}" $VOL_OPTS -p {{ cdata['ports']['app']['container'] }} {{branch_container_full}}:"$TAG" {{cdata.get('startup_args', '')}}

end script

# Post start script checks that the container it actually running
# It uses a small number of retries since the startup of containers
# is not instantaneous
post-start script
    echo INFO: Checking if container {{branch_name}} is running
	# Test for success
	for i in {1..5}
	do
		RUNNING_ID="`docker ps -q --filter name={{branch_name}}`"
		if [ -z ${RUNNING_ID} ]; then
			echo WARNING: Docker not started yet, retrying...
			sleep 3
		else
			echo INFO: Docker instance has started successfully with id ${RUNNING_ID}
			exit 0
		fi
	done
	echo ERROR: Docker failed to start instance
	exit 1
end script

post-stop exec docker rm -f {{ branch_name }}
